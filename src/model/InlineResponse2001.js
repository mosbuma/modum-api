/**
 * Modum MODsense API
 * Allows you to interact with the modum system
 *
 * The version of the OpenAPI document: 4.3.2
 * Contact: support@modum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineResponse2001 model module.
 * @module model/InlineResponse2001
 * @version 4.3.2
 */
class InlineResponse2001 {
    /**
     * Constructs a new <code>InlineResponse2001</code>.
     * @alias module:model/InlineResponse2001
     * @param id {String} 
     * @param state {module:model/InlineResponse2001.StateEnum} the state the shipment is currently in
     * @param shipmentId {String} 
     * @param trackingId {String} 
     * @param sendEmail {Boolean} An email was sent for this notification.
     * @param sendSms {Boolean} A sms was sent for this notification. If sending fails due to a invalid phone number it would show as false. Note that it could still fail due to various other reasons.
     */
    constructor(id, state, shipmentId, trackingId, sendEmail, sendSms) { 
        
        InlineResponse2001.initialize(this, id, state, shipmentId, trackingId, sendEmail, sendSms);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, state, shipmentId, trackingId, sendEmail, sendSms) { 
        obj['id'] = id;
        obj['state'] = state;
        obj['shipment_id'] = shipmentId;
        obj['tracking_id'] = trackingId;
        obj['send_email'] = sendEmail;
        obj['send_sms'] = sendSms;
    }

    /**
     * Constructs a <code>InlineResponse2001</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse2001} obj Optional instance to populate.
     * @return {module:model/InlineResponse2001} The populated <code>InlineResponse2001</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse2001();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('shipment_id')) {
                obj['shipment_id'] = ApiClient.convertToType(data['shipment_id'], 'String');
            }
            if (data.hasOwnProperty('tracking_id')) {
                obj['tracking_id'] = ApiClient.convertToType(data['tracking_id'], 'String');
            }
            if (data.hasOwnProperty('send_email')) {
                obj['send_email'] = ApiClient.convertToType(data['send_email'], 'Boolean');
            }
            if (data.hasOwnProperty('send_sms')) {
                obj['send_sms'] = ApiClient.convertToType(data['send_sms'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
InlineResponse2001.prototype['id'] = undefined;

/**
 * the state the shipment is currently in
 * @member {module:model/InlineResponse2001.StateEnum} state
 */
InlineResponse2001.prototype['state'] = undefined;

/**
 * @member {String} shipment_id
 */
InlineResponse2001.prototype['shipment_id'] = undefined;

/**
 * @member {String} tracking_id
 */
InlineResponse2001.prototype['tracking_id'] = undefined;

/**
 * An email was sent for this notification.
 * @member {Boolean} send_email
 */
InlineResponse2001.prototype['send_email'] = undefined;

/**
 * A sms was sent for this notification. If sending fails due to a invalid phone number it would show as false. Note that it could still fail due to various other reasons.
 * @member {Boolean} send_sms
 */
InlineResponse2001.prototype['send_sms'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
InlineResponse2001['StateEnum'] = {

    /**
     * value: "MISSING_DATA"
     * @const
     */
    "MISSING_DATA": "MISSING_DATA",

    /**
     * value: "EXAMINATION_REQUIRED"
     * @const
     */
    "EXAMINATION_REQUIRED": "EXAMINATION_REQUIRED",

    /**
     * value: "ERRONEOUS"
     * @const
     */
    "ERRONEOUS": "ERRONEOUS",

    /**
     * value: "IN_TRANSIT"
     * @const
     */
    "IN_TRANSIT": "IN_TRANSIT"
};



export default InlineResponse2001;

