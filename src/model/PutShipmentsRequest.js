/**
 * Modum MODsense API
 * Allows you to interact with the modum system
 *
 * The version of the OpenAPI document: 4.3.2
 * Contact: support@modum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutShipmentsRequest model module.
 * @module model/PutShipmentsRequest
 * @version 4.3.2
 */
class PutShipmentsRequest {
    /**
     * Constructs a new <code>PutShipmentsRequest</code>.
     * @alias module:model/PutShipmentsRequest
     * @param trackingId {String} 
     * @param startTimestamp {Date} 
     * @param stopTimestamp {Date} 
     * @param firstMeasurement {Date} 
     * @param lastMeasurement {Date} 
     * @param commissioningTime {Date} 
     * @param shipmentProfileId {String} 
     * @param senderId {String} 
     * @param nonce {String} 
     * @param macAddress {String} 
     * @param firmwareVersionMajor {Number} 
     * @param firmwareVersionMinor {Number} 
     * @param signature {String} 
     * @param memoryFull {Boolean} 
     * @param batteryLow {Boolean} 
     * @param timingError {Boolean} 
     * @param hardwareError {Boolean} 
     * @param loggerExpired {Boolean} 
     * @param alertOccurred {Boolean} 
     * @param temperatureData {String} base64 encoded temperatures in 1/100 degree C encoded as signed int16 little endian
     * @param batteryData {String} 
     */
    constructor(trackingId, startTimestamp, stopTimestamp, firstMeasurement, lastMeasurement, commissioningTime, shipmentProfileId, senderId, nonce, macAddress, firmwareVersionMajor, firmwareVersionMinor, signature, memoryFull, batteryLow, timingError, hardwareError, loggerExpired, alertOccurred, temperatureData, batteryData) { 
        
        PutShipmentsRequest.initialize(this, trackingId, startTimestamp, stopTimestamp, firstMeasurement, lastMeasurement, commissioningTime, shipmentProfileId, senderId, nonce, macAddress, firmwareVersionMajor, firmwareVersionMinor, signature, memoryFull, batteryLow, timingError, hardwareError, loggerExpired, alertOccurred, temperatureData, batteryData);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, trackingId, startTimestamp, stopTimestamp, firstMeasurement, lastMeasurement, commissioningTime, shipmentProfileId, senderId, nonce, macAddress, firmwareVersionMajor, firmwareVersionMinor, signature, memoryFull, batteryLow, timingError, hardwareError, loggerExpired, alertOccurred, temperatureData, batteryData) { 
        obj['tracking_id'] = trackingId;
        obj['start_timestamp'] = startTimestamp;
        obj['stop_timestamp'] = stopTimestamp;
        obj['first_measurement'] = firstMeasurement;
        obj['last_measurement'] = lastMeasurement;
        obj['commissioning_time'] = commissioningTime;
        obj['shipment_profile_id'] = shipmentProfileId;
        obj['sender_id'] = senderId;
        obj['nonce'] = nonce;
        obj['mac_address'] = macAddress;
        obj['firmware_version_major'] = firmwareVersionMajor;
        obj['firmware_version_minor'] = firmwareVersionMinor;
        obj['signature'] = signature;
        obj['memory_full'] = memoryFull;
        obj['battery_low'] = batteryLow;
        obj['timing_error'] = timingError;
        obj['hardware_error'] = hardwareError;
        obj['logger_expired'] = loggerExpired;
        obj['alert_occurred'] = alertOccurred;
        obj['temperature_data'] = temperatureData;
        obj['battery_data'] = batteryData;
    }

    /**
     * Constructs a <code>PutShipmentsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutShipmentsRequest} obj Optional instance to populate.
     * @return {module:model/PutShipmentsRequest} The populated <code>PutShipmentsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutShipmentsRequest();

            if (data.hasOwnProperty('tracking_id')) {
                obj['tracking_id'] = ApiClient.convertToType(data['tracking_id'], 'String');
            }
            if (data.hasOwnProperty('start_timestamp')) {
                obj['start_timestamp'] = ApiClient.convertToType(data['start_timestamp'], 'Date');
            }
            if (data.hasOwnProperty('stop_timestamp')) {
                obj['stop_timestamp'] = ApiClient.convertToType(data['stop_timestamp'], 'Date');
            }
            if (data.hasOwnProperty('first_measurement')) {
                obj['first_measurement'] = ApiClient.convertToType(data['first_measurement'], 'Date');
            }
            if (data.hasOwnProperty('last_measurement')) {
                obj['last_measurement'] = ApiClient.convertToType(data['last_measurement'], 'Date');
            }
            if (data.hasOwnProperty('commissioning_time')) {
                obj['commissioning_time'] = ApiClient.convertToType(data['commissioning_time'], 'Date');
            }
            if (data.hasOwnProperty('shipment_profile_id')) {
                obj['shipment_profile_id'] = ApiClient.convertToType(data['shipment_profile_id'], 'String');
            }
            if (data.hasOwnProperty('sender_id')) {
                obj['sender_id'] = ApiClient.convertToType(data['sender_id'], 'String');
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'String');
            }
            if (data.hasOwnProperty('mac_address')) {
                obj['mac_address'] = ApiClient.convertToType(data['mac_address'], 'String');
            }
            if (data.hasOwnProperty('firmware_version_major')) {
                obj['firmware_version_major'] = ApiClient.convertToType(data['firmware_version_major'], 'Number');
            }
            if (data.hasOwnProperty('firmware_version_minor')) {
                obj['firmware_version_minor'] = ApiClient.convertToType(data['firmware_version_minor'], 'Number');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('memory_full')) {
                obj['memory_full'] = ApiClient.convertToType(data['memory_full'], 'Boolean');
            }
            if (data.hasOwnProperty('battery_low')) {
                obj['battery_low'] = ApiClient.convertToType(data['battery_low'], 'Boolean');
            }
            if (data.hasOwnProperty('timing_error')) {
                obj['timing_error'] = ApiClient.convertToType(data['timing_error'], 'Boolean');
            }
            if (data.hasOwnProperty('hardware_error')) {
                obj['hardware_error'] = ApiClient.convertToType(data['hardware_error'], 'Boolean');
            }
            if (data.hasOwnProperty('logger_expired')) {
                obj['logger_expired'] = ApiClient.convertToType(data['logger_expired'], 'Boolean');
            }
            if (data.hasOwnProperty('alert_occurred')) {
                obj['alert_occurred'] = ApiClient.convertToType(data['alert_occurred'], 'Boolean');
            }
            if (data.hasOwnProperty('temperature_data')) {
                obj['temperature_data'] = ApiClient.convertToType(data['temperature_data'], 'String');
            }
            if (data.hasOwnProperty('battery_data')) {
                obj['battery_data'] = ApiClient.convertToType(data['battery_data'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} tracking_id
 */
PutShipmentsRequest.prototype['tracking_id'] = undefined;

/**
 * @member {Date} start_timestamp
 */
PutShipmentsRequest.prototype['start_timestamp'] = undefined;

/**
 * @member {Date} stop_timestamp
 */
PutShipmentsRequest.prototype['stop_timestamp'] = undefined;

/**
 * @member {Date} first_measurement
 */
PutShipmentsRequest.prototype['first_measurement'] = undefined;

/**
 * @member {Date} last_measurement
 */
PutShipmentsRequest.prototype['last_measurement'] = undefined;

/**
 * @member {Date} commissioning_time
 */
PutShipmentsRequest.prototype['commissioning_time'] = undefined;

/**
 * @member {String} shipment_profile_id
 */
PutShipmentsRequest.prototype['shipment_profile_id'] = undefined;

/**
 * @member {String} sender_id
 */
PutShipmentsRequest.prototype['sender_id'] = undefined;

/**
 * @member {String} nonce
 */
PutShipmentsRequest.prototype['nonce'] = undefined;

/**
 * @member {String} mac_address
 */
PutShipmentsRequest.prototype['mac_address'] = undefined;

/**
 * @member {Number} firmware_version_major
 */
PutShipmentsRequest.prototype['firmware_version_major'] = undefined;

/**
 * @member {Number} firmware_version_minor
 */
PutShipmentsRequest.prototype['firmware_version_minor'] = undefined;

/**
 * @member {String} signature
 */
PutShipmentsRequest.prototype['signature'] = undefined;

/**
 * @member {Boolean} memory_full
 */
PutShipmentsRequest.prototype['memory_full'] = undefined;

/**
 * @member {Boolean} battery_low
 */
PutShipmentsRequest.prototype['battery_low'] = undefined;

/**
 * @member {Boolean} timing_error
 */
PutShipmentsRequest.prototype['timing_error'] = undefined;

/**
 * @member {Boolean} hardware_error
 */
PutShipmentsRequest.prototype['hardware_error'] = undefined;

/**
 * @member {Boolean} logger_expired
 */
PutShipmentsRequest.prototype['logger_expired'] = undefined;

/**
 * @member {Boolean} alert_occurred
 */
PutShipmentsRequest.prototype['alert_occurred'] = undefined;

/**
 * base64 encoded temperatures in 1/100 degree C encoded as signed int16 little endian
 * @member {String} temperature_data
 */
PutShipmentsRequest.prototype['temperature_data'] = undefined;

/**
 * @member {String} battery_data
 */
PutShipmentsRequest.prototype['battery_data'] = undefined;






export default PutShipmentsRequest;

