/**
 * Modum MODsense API
 * Allows you to interact with the modum system
 *
 * The version of the OpenAPI document: 4.3.2
 * Contact: support@modum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivateAccountRequest from '../model/ActivateAccountRequest';
import Auth from '../model/Auth';
import Error from '../model/Error';
import InitializeResetRequest from '../model/InitializeResetRequest';
import InlineObject from '../model/InlineObject';
import InlineResponse403 from '../model/InlineResponse403';
import ResetPasswordRequest from '../model/ResetPasswordRequest';

/**
* Account service.
* @module api/AccountApi
* @version 4.3.2
*/
export default class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateAccount operation.
     * @callback module:api/AccountApi~activateAccountCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate new user account
     * Activating an account after an invitation email was received
     * @param {module:model/ActivateAccountRequest} activateAccountRequest 
     * @param {module:api/AccountApi~activateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    activateAccount(activateAccountRequest, callback) {
      let postBody = activateAccountRequest;
      // verify the required parameter 'activateAccountRequest' is set
      if (activateAccountRequest === undefined || activateAccountRequest === null) {
        throw new Error("Missing the required parameter 'activateAccountRequest' when calling activateAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initializeReset operation.
     * @callback module:api/AccountApi~initializeResetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialize password reset
     * Request password reset email
     * @param {module:model/InitializeResetRequest} initializeResetRequest Email of the user who wants to reset their password
     * @param {module:api/AccountApi~initializeResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    initializeReset(initializeResetRequest, callback) {
      let postBody = initializeResetRequest;
      // verify the required parameter 'initializeResetRequest' is set
      if (initializeResetRequest === undefined || initializeResetRequest === null) {
        throw new Error("Missing the required parameter 'initializeResetRequest' when calling initializeReset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/reset', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/AccountApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Auth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in
     * Log in - get the user information, a JWT token, and a refresh token for the user.
     * @param {module:model/InlineObject} inlineObject 
     * @param {module:api/AccountApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Auth}
     */
    login(inlineObject, callback) {
      let postBody = inlineObject;
      // verify the required parameter 'inlineObject' is set
      if (inlineObject === undefined || inlineObject === null) {
        throw new Error("Missing the required parameter 'inlineObject' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Auth;
      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refresh operation.
     * @callback module:api/AccountApi~refreshCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh authentication token
     * Refresh authentication token
     * @param {module:api/AccountApi~refreshCallback} callback The callback function, accepting three arguments: error, data, response
     */
    refresh(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPassword operation.
     * @callback module:api/AccountApi~resetPasswordCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password
     * Set a new password
     * @param {module:model/ResetPasswordRequest} resetPasswordRequest 
     * @param {module:api/AccountApi~resetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resetPassword(resetPasswordRequest, callback) {
      let postBody = resetPasswordRequest;
      // verify the required parameter 'resetPasswordRequest' is set
      if (resetPasswordRequest === undefined || resetPasswordRequest === null) {
        throw new Error("Missing the required parameter 'resetPasswordRequest' when calling resetPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
