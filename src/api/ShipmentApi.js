/**
 * Modum MODsense API
 * Allows you to interact with the modum system
 *
 * The version of the OpenAPI document: 4.3.2
 * Contact: support@modum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcknowledgeErrorRequest from '../model/AcknowledgeErrorRequest';
import AcknowledgeMissingRequest from '../model/AcknowledgeMissingRequest';
import AddCommentRequest from '../model/AddCommentRequest';
import AddFieldsRequest from '../model/AddFieldsRequest';
import Error from '../model/Error';
import InlineObject from '../model/InlineObject';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2002 from '../model/InlineResponse2002';
import Profile from '../model/Profile';
import PutShipmentsRequest from '../model/PutShipmentsRequest';
import SetCompliantRequest from '../model/SetCompliantRequest';
import SetNonCompliantRequest from '../model/SetNonCompliantRequest';
import StartShipmentRequest from '../model/StartShipmentRequest';
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Shipment service.
* @module api/ShipmentApi
* @version 4.3.2
*/
export default class ShipmentApi {

    /**
    * Constructs a new ShipmentApi. 
    * @alias module:api/ShipmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acknowledgeError operation.
     * @callback module:api/ShipmentApi~acknowledgeErrorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledge an erroneous shipment
     * Set shipment status to erroneous acknowledged if its current status is erroneous. Requires the HANDLE_SHIPMENTS permission.
     * @param {String} shipmentId 
     * @param {module:model/AcknowledgeErrorRequest} acknowledgeErrorRequest 
     * @param {module:api/ShipmentApi~acknowledgeErrorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    acknowledgeError(shipmentId, acknowledgeErrorRequest, callback) {
      let postBody = acknowledgeErrorRequest;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling acknowledgeError");
      }
      // verify the required parameter 'acknowledgeErrorRequest' is set
      if (acknowledgeErrorRequest === undefined || acknowledgeErrorRequest === null) {
        throw new Error("Missing the required parameter 'acknowledgeErrorRequest' when calling acknowledgeError");
      }

      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/shipments/{shipmentId}/acknowledge-error', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the acknowledgeMissing operation.
     * @callback module:api/ShipmentApi~acknowledgeMissingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledge a missing shipment
     * Set shipment status to missing data acknowledged if its current status is missing. Requires the HANDLE_SHIPMENTS permission.
     * @param {String} shipmentId 
     * @param {module:model/AcknowledgeMissingRequest} acknowledgeMissingRequest 
     * @param {module:api/ShipmentApi~acknowledgeMissingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    acknowledgeMissing(shipmentId, acknowledgeMissingRequest, callback) {
      let postBody = acknowledgeMissingRequest;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling acknowledgeMissing");
      }
      // verify the required parameter 'acknowledgeMissingRequest' is set
      if (acknowledgeMissingRequest === undefined || acknowledgeMissingRequest === null) {
        throw new Error("Missing the required parameter 'acknowledgeMissingRequest' when calling acknowledgeMissing");
      }

      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/shipments/{shipmentId}/acknowledge-missing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addComment operation.
     * @callback module:api/ShipmentApi~addCommentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a comment
     * Add a comment to a shipment. Requires the ADD_COMMENTS permission.
     * @param {String} shipmentId 
     * @param {module:model/AddCommentRequest} addCommentRequest 
     * @param {module:api/ShipmentApi~addCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addComment(shipmentId, addCommentRequest, callback) {
      let postBody = addCommentRequest;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling addComment");
      }
      // verify the required parameter 'addCommentRequest' is set
      if (addCommentRequest === undefined || addCommentRequest === null) {
        throw new Error("Missing the required parameter 'addCommentRequest' when calling addComment");
      }

      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/shipments/{shipmentId}/comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFields operation.
     * @callback module:api/ShipmentApi~addFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add values for custom fields
     * Update shipment with the given custom field values.
     * @param {String} shipmentId 
     * @param {module:model/AddFieldsRequest} addFieldsRequest 
     * @param {module:api/ShipmentApi~addFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addFields(shipmentId, addFieldsRequest, callback) {
      let postBody = addFieldsRequest;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling addFields");
      }
      // verify the required parameter 'addFieldsRequest' is set
      if (addFieldsRequest === undefined || addFieldsRequest === null) {
        throw new Error("Missing the required parameter 'addFieldsRequest' when calling addFields");
      }

      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/shipments/{shipmentId}/fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProfile operation.
     * @callback module:api/ShipmentApi~createProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a shipment profile
     * Create a new shipment profile. Shipment profile contains settings used when starting loggers, such as the recording interval, as well as the alarm criteria.
     * @param {module:model/Profile} profile 
     * @param {module:api/ShipmentApi~createProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    createProfile(profile, callback) {
      let postBody = profile;
      // verify the required parameter 'profile' is set
      if (profile === undefined || profile === null) {
        throw new Error("Missing the required parameter 'profile' when calling createProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfile operation.
     * @callback module:api/ShipmentApi~deleteProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a shipment profile
     * Soft delete / deactivate a shipment profile. The profile is still accessible in the list of profiles.
     * @param {String} groupId 
     * @param {module:api/ShipmentApi~deleteProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteProfile(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteProfile");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/profiles/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateCSV operation.
     * @callback module:api/ShipmentApi~generateCSVCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate shipment report(s) in csv format
     * Generate shipment reports for one or more shipments in csv format
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE 
     * @param {module:api/ShipmentApi~generateCSVCallback} callback The callback function, accepting three arguments: error, data, response
     */
    generateCSV(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/shipments/csv', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePDF operation.
     * @callback module:api/ShipmentApi~generatePDFCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate shipment report(s) in pdf format
     * Generater shipment reports for one or more shipments in pdf format
     * @param {module:api/ShipmentApi~generatePDFCallback} callback The callback function, accepting three arguments: error, data, response
     */
    generatePDF(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/shipments/pdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateXLSX operation.
     * @callback module:api/ShipmentApi~generateXLSXCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate shipment report(s) in xlsx format
     * Generater shipment reports for one or more shipments in xlxs format
     * @param {module:api/ShipmentApi~generateXLSXCallback} callback The callback function, accepting three arguments: error, data, response
     */
    generateXLSX(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/shipments/xlsx', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlarms operation.
     * @callback module:api/ShipmentApi~getAlarmsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of alarms triggered for the user
     * <p>Get a list of alarms triggered for the user. Alarms can be triggered for readouts, by gateway snapshots and when they are marked missing.</p> <ul>   <li>FINAL_DATA alarms only show as long as they are in the state EXAMINATION_REQUIRED or ERRONOUS. They disappear once the shipment is marked as COMPLIANT, NON_COMPLIANT or as ERRONEOUS_ACKNOWLEDGED.</li>   <li>MISSING alarms only show as long as the shipment is MISSING. They disappear once the shipment is marked as MISSING_ACKNOWLEDGED or data is received.</li>   <li>SNAPSHOT_ALARM only show as long as the shipment is IN_TRANSIT. They disappear once the shipment becomes MISSING or data is received.</li> </ul> 
     * @param {module:api/ShipmentApi~getAlarmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    getAlarms(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2001];
      return this.apiClient.callApi(
        '/alarms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvents operation.
     * @callback module:api/ShipmentApi~getEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2002>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get shipment change & comments log
     * Get events and comments related to the given shipment. These could be system events, such as automatic state changes, user events, such as manual state changes, or gateway events. Sorting is newest first.
     * @param {String} contentType 
     * @param {String} shipmentId 
     * @param {module:api/ShipmentApi~getEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2002>}
     */
    getEvents(contentType, shipmentId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getEvents");
      }
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getEvents");
      }

      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2002];
      return this.apiClient.callApi(
        '/shipments/{shipmentId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGatewaySessions operation.
     * @callback module:api/ShipmentApi~getGatewaySessionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get time intervals where a shipment was close to a gateway.
     * Get all \"sessions\" (from, to) where a shipment was close to a gateway. A session is a continous time (no gap longer than 15 minutes) where a single gateway installation could \"see\" the logger/shipment by means of BLE advertisement packages sent via the snapshot endpoint. The response is sorted by the \"first\" timestamp. Only gateway sessions of shipments in the requester's company are returned, empty array otherwise or if shipment does not exist.
     * @param {String} shipmentId 
     * @param {module:api/ShipmentApi~getGatewaySessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getGatewaySessions(shipmentId, callback) {
      let postBody = null;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getGatewaySessions");
      }

      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/shipments/{shipmentId}/gw-sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoggerDataByNonce operation.
     * @callback module:api/ShipmentApi~getLoggerDataByNonceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logger data (temperature data) for shipment
     * Get all data from the logger for the shipment with the given nonce.
     * @param {String} contentType 
     * @param {String} shipmentNonceHex The nonce of the shipment as found in the GET /shipment/{shipmentID} response. Must be encoded in hex
     * @param {module:api/ShipmentApi~getLoggerDataByNonceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getLoggerDataByNonce(contentType, shipmentNonceHex, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getLoggerDataByNonce");
      }
      // verify the required parameter 'shipmentNonceHex' is set
      if (shipmentNonceHex === undefined || shipmentNonceHex === null) {
        throw new Error("Missing the required parameter 'shipmentNonceHex' when calling getLoggerDataByNonce");
      }

      let pathParams = {
        'shipmentNonceHex': shipmentNonceHex
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/logger/{shipmentNonceHex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfiles operation.
     * @callback module:api/ShipmentApi~getProfilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Profile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get shipment profiles
     * Get the list of shipment profiles. This endpoint returns the newest version of all profiles, including the deactivated ones.
     * @param {module:api/ShipmentApi~getProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Profile>}
     */
    getProfiles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Profile];
      return this.apiClient.callApi(
        '/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipmentByID operation.
     * @callback module:api/ShipmentApi~getShipmentByIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get shipment by ID
     * Get shipment information. This also includes the shipment profile information with calculated metrics if the shipment has already been read out.
     * @param {String} contentType 
     * @param {String} shipmentId 
     * @param {module:api/ShipmentApi~getShipmentByIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getShipmentByID(contentType, shipmentId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getShipmentByID");
      }
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getShipmentByID");
      }

      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/shipments/{shipmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipmentStatus operation.
     * @callback module:api/ShipmentApi~getShipmentStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status of shipments
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/InlineObject>} opts.inlineObject 
     * @param {module:api/ShipmentApi~getShipmentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    getShipmentStatus(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/shipments/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipments operation.
     * @callback module:api/ShipmentApi~getShipmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get shipments
     * Get a list of shipments for the authenticated user's company. Allows soting and filtering.
     * @param {String} contentType 
     * @param {module:api/ShipmentApi~getShipmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getShipments(contentType, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getShipments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/shipments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipmentsOverview operation.
     * @callback module:api/ShipmentApi~getShipmentsOverviewCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a shipment overview
     * Get an overview of the number of shipments in each of the possible states.
     * @param {String} contentType 
     * @param {module:api/ShipmentApi~getShipmentsOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getShipmentsOverview(contentType, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getShipmentsOverview");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/shipments/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putShipments operation.
     * @callback module:api/ShipmentApi~putShipmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a shipment
     * Stop a shipment. If there is an existing shipment, readout data gets associated with it and shipment is set to a corresponding state based on alarm status. If no shipment with the given nonce exists, a new shipment with all data is saved (for cases when the start / readout device was offline at the time the logger was started)
     * @param {module:model/PutShipmentsRequest} putShipmentsRequest 
     * @param {module:api/ShipmentApi~putShipmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putShipments(putShipmentsRequest, callback) {
      let postBody = putShipmentsRequest;
      // verify the required parameter 'putShipmentsRequest' is set
      if (putShipmentsRequest === undefined || putShipmentsRequest === null) {
        throw new Error("Missing the required parameter 'putShipmentsRequest' when calling putShipments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/shipments', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setCompliant operation.
     * @callback module:api/ShipmentApi~setCompliantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set state to compliant
     * Set shipment status to compliant if its current status is examination required. Requires the HANDLE_SHIPMENTS permission.
     * @param {String} shipmentId 
     * @param {module:model/SetCompliantRequest} setCompliantRequest 
     * @param {module:api/ShipmentApi~setCompliantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setCompliant(shipmentId, setCompliantRequest, callback) {
      let postBody = setCompliantRequest;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling setCompliant");
      }
      // verify the required parameter 'setCompliantRequest' is set
      if (setCompliantRequest === undefined || setCompliantRequest === null) {
        throw new Error("Missing the required parameter 'setCompliantRequest' when calling setCompliant");
      }

      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/shipments/{shipmentId}/compliant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setNonCompliant operation.
     * @callback module:api/ShipmentApi~setNonCompliantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set state to non-compliant
     * Set shipment status to non-compliant if its current status is examination required. Requires the HANDLE_SHIPMENTS permission.
     * @param {String} shipmentId 
     * @param {module:model/SetNonCompliantRequest} setNonCompliantRequest 
     * @param {module:api/ShipmentApi~setNonCompliantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setNonCompliant(shipmentId, setNonCompliantRequest, callback) {
      let postBody = setNonCompliantRequest;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling setNonCompliant");
      }
      // verify the required parameter 'setNonCompliantRequest' is set
      if (setNonCompliantRequest === undefined || setNonCompliantRequest === null) {
        throw new Error("Missing the required parameter 'setNonCompliantRequest' when calling setNonCompliant");
      }

      let pathParams = {
        'shipmentId': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/shipments/{shipmentId}/noncompliant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startShipment operation.
     * @callback module:api/ShipmentApi~startShipmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a shipment
     * Save a new shipment. This endpoint should be called once a logger has been started. It sets shipment state to in transit.
     * @param {module:model/StartShipmentRequest} startShipmentRequest 
     * @param {module:api/ShipmentApi~startShipmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startShipment(startShipmentRequest, callback) {
      let postBody = startShipmentRequest;
      // verify the required parameter 'startShipmentRequest' is set
      if (startShipmentRequest === undefined || startShipmentRequest === null) {
        throw new Error("Missing the required parameter 'startShipmentRequest' when calling startShipment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/shipments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfile operation.
     * @callback module:api/ShipmentApi~updateProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new version of shipment profile
     * Deactives the previous shipment profile and adds a new version with sent parameters.
     * @param {String} groupId 
     * @param {module:model/Profile} profile 
     * @param {module:api/ShipmentApi~updateProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    updateProfile(groupId, profile, callback) {
      let postBody = profile;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateProfile");
      }
      // verify the required parameter 'profile' is set
      if (profile === undefined || profile === null) {
        throw new Error("Missing the required parameter 'profile' when calling updateProfile");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/profiles/{group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
