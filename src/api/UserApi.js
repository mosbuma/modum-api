/**
 * Modum MODsense API
 * Allows you to interact with the modum system
 *
 * The version of the OpenAPI document: 4.3.2
 * Contact: support@modum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeRoleOfUserRequest from '../model/ChangeRoleOfUserRequest';
import Error from '../model/Error';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse404 from '../model/InlineResponse404';
import InviteUserRequest from '../model/InviteUserRequest';
import UpdateownUserRequest from '../model/UpdateownUserRequest';
import User from '../model/User';

/**
* User service.
* @module api/UserApi
* @version 4.3.2
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeRoleOfUser operation.
     * @callback module:api/UserApi~changeRoleOfUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change role of user
     * Update the role of users in the company. Only a company admin is allowed to update other users. There needs to be at least one Admin per company, so changing the role of the last Admin won't work.
     * @param {String} userId The id of the user for which we want to change the role.
     * @param {module:model/ChangeRoleOfUserRequest} changeRoleOfUserRequest 
     * @param {module:api/UserApi~changeRoleOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    changeRoleOfUser(userId, changeRoleOfUserRequest, callback) {
      let postBody = changeRoleOfUserRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling changeRoleOfUser");
      }
      // verify the required parameter 'changeRoleOfUserRequest' is set
      if (changeRoleOfUserRequest === undefined || changeRoleOfUserRequest === null) {
        throw new Error("Missing the required parameter 'changeRoleOfUserRequest' when calling changeRoleOfUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOwnUser operation.
     * @callback module:api/UserApi~getOwnUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get own user
     * Get the logged in user information including company, role and permissions.
     * @param {module:api/UserApi~getOwnUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOwnUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inviteUser operation.
     * @callback module:api/UserApi~inviteUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite user
     * Invite a new user to join your modum organization. Only a company admin is allowed to invite new users.
     * @param {module:model/InviteUserRequest} inviteUserRequest New user information
     * @param {module:api/UserApi~inviteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    inviteUser(inviteUserRequest, callback) {
      let postBody = inviteUserRequest;
      // verify the required parameter 'inviteUserRequest' is set
      if (inviteUserRequest === undefined || inviteUserRequest === null) {
        throw new Error("Missing the required parameter 'inviteUserRequest' when calling inviteUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/UserApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users
     * Get a list of users in the company of the authenticated user.
     * @param {module:api/UserApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    listUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactivateUser operation.
     * @callback module:api/UserApi~reactivateUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reactivate a user
     * Reactivate user account in your company that was previously deactivated. Only company admins can reactivate user accounts.
     * @param {String} userId 
     * @param {String} contentType 
     * @param {module:api/UserApi~reactivateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    reactivateUser(userId, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling reactivateUser");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling reactivateUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/{userId}/reactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUser operation.
     * @callback module:api/UserApi~removeUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate user account
     * Remove a user in your company. The user will no longer be allowed to access this company. This action is only possible if the given user is not the last company admin. Only a company admin is allowed to remove users.
     * @param {String} userId 
     * @param {module:api/UserApi~removeUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPinChange operation.
     * @callback module:api/UserApi~requestPinChangeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request Verification PIN Change
     * Sends an email to change the verification pin
     * @param {module:api/UserApi~requestPinChangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    requestPinChange(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/verification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setVerificationPin operation.
     * @callback module:api/UserApi~setVerificationPinCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Verification PIN
     * Set the verification pin to a new value
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject1} opts.inlineObject1 
     * @param {module:api/UserApi~setVerificationPinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setVerificationPin(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject1'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/verification', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOwnUser operation.
     * @callback module:api/UserApi~updateOwnUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update own user account
     * Update own user account details, such as language, phone number, or name.
     * @param {module:model/UpdateownUserRequest} updateownUserRequest 
     * @param {module:api/UserApi~updateOwnUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateOwnUser(updateownUserRequest, callback) {
      let postBody = updateownUserRequest;
      // verify the required parameter 'updateownUserRequest' is set
      if (updateownUserRequest === undefined || updateownUserRequest === null) {
        throw new Error("Missing the required parameter 'updateownUserRequest' when calling updateOwnUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
