/**
 * Modum MODsense API
 * Allows you to interact with the modum system
 *
 * The version of the OpenAPI document: 4.3.2
 * Contact: support@modum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import InlineResponse2003 from '../model/InlineResponse2003';
import NotificationRequest from '../model/NotificationRequest';

/**
* Notification service.
* @module api/NotificationApi
* @version 4.3.2
*/
export default class NotificationApi {

    /**
    * Constructs a new NotificationApi. 
    * @alias module:api/NotificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEmailNotification operation.
     * @callback module:api/NotificationApi~createEmailNotificationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an email notification setting
     * Add email notification setting for the given user and shipment profile. This will result in the user receiving email notifications whenever an alarm has been triggered for shipments started with the given shipment profile.
     * @param {module:model/NotificationRequest} notificationRequest 
     * @param {module:api/NotificationApi~createEmailNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createEmailNotification(notificationRequest, callback) {
      let postBody = notificationRequest;
      // verify the required parameter 'notificationRequest' is set
      if (notificationRequest === undefined || notificationRequest === null) {
        throw new Error("Missing the required parameter 'notificationRequest' when calling createEmailNotification");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/notifications/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSMSNotification operation.
     * @callback module:api/NotificationApi~createSMSNotificationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an SMS notification setting
     * Add text message notification setting for the given user and shipment profile. This will result in the user receiving text message notifications whenever an alarm has been triggered for shipments started with the given shipment profile. This notification setting can only be activated for users with phone numbers.
     * @param {module:model/NotificationRequest} notificationRequest 
     * @param {module:api/NotificationApi~createSMSNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createSMSNotification(notificationRequest, callback) {
      let postBody = notificationRequest;
      // verify the required parameter 'notificationRequest' is set
      if (notificationRequest === undefined || notificationRequest === null) {
        throw new Error("Missing the required parameter 'notificationRequest' when calling createSMSNotification");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/notifications/sms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailNotification operation.
     * @callback module:api/NotificationApi~deleteEmailNotificationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an email notification setting
     * Remove email notification setting for the given user and shipment profile. This will result in the user no longer receiving email notifications whenever an alarm has been triggered for shipments started with the given shipment profile.
     * @param {module:model/NotificationRequest} notificationRequest 
     * @param {module:api/NotificationApi~deleteEmailNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteEmailNotification(notificationRequest, callback) {
      let postBody = notificationRequest;
      // verify the required parameter 'notificationRequest' is set
      if (notificationRequest === undefined || notificationRequest === null) {
        throw new Error("Missing the required parameter 'notificationRequest' when calling deleteEmailNotification");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/notifications/email', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSMSNotification operation.
     * @callback module:api/NotificationApi~deleteSMSNotificationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an SMS notification setting
     * Remove text message notification setting for the given user and shipment profile. This will result in the user no longer receiving text message notifications whenever an alarm has been triggered for shipments started with the given shipment profile.
     * @param {module:model/NotificationRequest} notificationRequest 
     * @param {module:api/NotificationApi~deleteSMSNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSMSNotification(notificationRequest, callback) {
      let postBody = notificationRequest;
      // verify the required parameter 'notificationRequest' is set
      if (notificationRequest === undefined || notificationRequest === null) {
        throw new Error("Missing the required parameter 'notificationRequest' when calling deleteSMSNotification");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/notifications/sms', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotifications operation.
     * @callback module:api/NotificationApi~getNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2003>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get notification settings
     * Get the list of all notification settings for all company's users and shipment profiles.
     * @param {module:api/NotificationApi~getNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2003>}
     */
    getNotifications(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2003];
      return this.apiClient.callApi(
        '/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
