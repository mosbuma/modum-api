/**
 * Modum MODsense API
 * Allows you to interact with the modum system
 *
 * The version of the OpenAPI document: 4.3.2
 * Contact: support@modum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateFieldRequest from '../model/CreateFieldRequest';
import Error from '../model/Error';
import UpdateFieldRequest from '../model/UpdateFieldRequest';

/**
* CompanyAdmin service.
* @module api/CompanyAdminApi
* @version 4.3.2
*/
export default class CompanyAdminApi {

    /**
    * Constructs a new CompanyAdminApi. 
    * @alias module:api/CompanyAdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createField operation.
     * @callback module:api/CompanyAdminApi~createFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a custom field
     * Create a custom field in the company of the authenticated user. This custom field will be then available for all shipments of the company.
     * @param {module:model/CreateFieldRequest} createFieldRequest 
     * @param {module:api/CompanyAdminApi~createFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createField(createFieldRequest, callback) {
      let postBody = createFieldRequest;
      // verify the required parameter 'createFieldRequest' is set
      if (createFieldRequest === undefined || createFieldRequest === null) {
        throw new Error("Missing the required parameter 'createFieldRequest' when calling createField");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gatewaysGet operation.
     * @callback module:api/CompanyAdminApi~gatewaysGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of gateway installation in company
     * Lists all active gateway installation in the requester's company
     * @param {module:api/CompanyAdminApi~gatewaysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gatewaysGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/gateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFields operation.
     * @callback module:api/CompanyAdminApi~listFieldsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List custom fields
     * @param {String} contentType 
     * @param {module:api/CompanyAdminApi~listFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listFields(contentType, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listFields");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateField operation.
     * @callback module:api/CompanyAdminApi~updateFieldCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a custom field
     * Update properties of an existing custom field.
     * @param {String} fieldId 
     * @param {module:model/UpdateFieldRequest} updateFieldRequest 
     * @param {module:api/CompanyAdminApi~updateFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateField(fieldId, updateFieldRequest, callback) {
      let postBody = updateFieldRequest;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling updateField");
      }
      // verify the required parameter 'updateFieldRequest' is set
      if (updateFieldRequest === undefined || updateFieldRequest === null) {
        throw new Error("Missing the required parameter 'updateFieldRequest' when calling updateField");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/fields/{fieldId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
