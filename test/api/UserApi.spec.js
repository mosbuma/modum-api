/**
 * Modum MODsense API
 * Allows you to interact with the modum system
 *
 * The version of the OpenAPI document: 4.3.2
 * Contact: support@modum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ModumMoDsenseApi);
  }
}(this, function(expect, ModumMoDsenseApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ModumMoDsenseApi.UserApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserApi', function() {
    describe('changeRoleOfUser', function() {
      it('should call changeRoleOfUser successfully', function(done) {
        //uncomment below and update the code to test changeRoleOfUser
        //instance.changeRoleOfUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOwnUser', function() {
      it('should call getOwnUser successfully', function(done) {
        //uncomment below and update the code to test getOwnUser
        //instance.getOwnUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inviteUser', function() {
      it('should call inviteUser successfully', function(done) {
        //uncomment below and update the code to test inviteUser
        //instance.inviteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsers', function() {
      it('should call listUsers successfully', function(done) {
        //uncomment below and update the code to test listUsers
        //instance.listUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reactivateUser', function() {
      it('should call reactivateUser successfully', function(done) {
        //uncomment below and update the code to test reactivateUser
        //instance.reactivateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeUser', function() {
      it('should call removeUser successfully', function(done) {
        //uncomment below and update the code to test removeUser
        //instance.removeUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestPinChange', function() {
      it('should call requestPinChange successfully', function(done) {
        //uncomment below and update the code to test requestPinChange
        //instance.requestPinChange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setVerificationPin', function() {
      it('should call setVerificationPin successfully', function(done) {
        //uncomment below and update the code to test setVerificationPin
        //instance.setVerificationPin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOwnUser', function() {
      it('should call updateOwnUser successfully', function(done) {
        //uncomment below and update the code to test updateOwnUser
        //instance.updateOwnUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
