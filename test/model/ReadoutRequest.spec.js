/**
 * Modum MODsense API
 * Allows you to interact with the modum system
 *
 * The version of the OpenAPI document: 4.3.2
 * Contact: support@modum.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ModumMoDsenseApi);
  }
}(this, function(expect, ModumMoDsenseApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ModumMoDsenseApi.ReadoutRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReadoutRequest', function() {
    it('should create an instance of ReadoutRequest', function() {
      // uncomment below and update the code to test ReadoutRequest
      //var instane = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be.a(ModumMoDsenseApi.ReadoutRequest);
    });

    it('should have the property alertOccurred (base name: "alert_occurred")', function() {
      // uncomment below and update the code to test the property alertOccurred
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property batteryData (base name: "battery_data")', function() {
      // uncomment below and update the code to test the property batteryData
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property batteryLow (base name: "battery_low")', function() {
      // uncomment below and update the code to test the property batteryLow
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property commissioningTime (base name: "commissioning_time")', function() {
      // uncomment below and update the code to test the property commissioningTime
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property firmwareVersionMajor (base name: "firmware_version_major")', function() {
      // uncomment below and update the code to test the property firmwareVersionMajor
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property firmwareVersionMinor (base name: "firmware_version_minor")', function() {
      // uncomment below and update the code to test the property firmwareVersionMinor
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property firstMeasurement (base name: "first_measurement")', function() {
      // uncomment below and update the code to test the property firstMeasurement
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property hardwareError (base name: "hardware_error")', function() {
      // uncomment below and update the code to test the property hardwareError
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property lastMeasurement (base name: "last_measurement")', function() {
      // uncomment below and update the code to test the property lastMeasurement
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property loggerExpired (base name: "logger_expired")', function() {
      // uncomment below and update the code to test the property loggerExpired
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property macAddress (base name: "mac_address")', function() {
      // uncomment below and update the code to test the property macAddress
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property memoryFull (base name: "memory_full")', function() {
      // uncomment below and update the code to test the property memoryFull
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property nonce (base name: "nonce")', function() {
      // uncomment below and update the code to test the property nonce
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property senderId (base name: "sender_id")', function() {
      // uncomment below and update the code to test the property senderId
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property shipmentProfileId (base name: "shipment_profile_id")', function() {
      // uncomment below and update the code to test the property shipmentProfileId
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property signature (base name: "signature")', function() {
      // uncomment below and update the code to test the property signature
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property startTimestamp (base name: "start_timestamp")', function() {
      // uncomment below and update the code to test the property startTimestamp
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property stopTimestamp (base name: "stop_timestamp")', function() {
      // uncomment below and update the code to test the property stopTimestamp
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property temperatureData (base name: "temperature_data")', function() {
      // uncomment below and update the code to test the property temperatureData
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property timingError (base name: "timing_error")', function() {
      // uncomment below and update the code to test the property timingError
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

    it('should have the property trackingId (base name: "tracking_id")', function() {
      // uncomment below and update the code to test the property trackingId
      //var instance = new ModumMoDsenseApi.ReadoutRequest();
      //expect(instance).to.be();
    });

  });

}));
